#pragma warning(push, 0)
#include <boost/test/unit_test.hpp>
#include <fakeit.hpp>

#include "opencv/cv.h"
#include "UbmLoader.h"
#include <boost/math/distributions/normal.hpp>
#include <vector>
#pragma warning(pop)
using namespace std;
using namespace cv;


BOOST_AUTO_TEST_SUITE(UbmTest)
BOOST_AUTO_TEST_CASE(likelihood_1gaussComponent1d) {
	Ubm ubm;
	ubm.means_ = (cv::Mat_<double>(1, 1) << 2);
	ubm.numGaussComponents_ = 1;
	int numDimensions = 1;
	vector<Mat> covs;
	covs.push_back((cv::Mat_<double>(1, 1) << 3));
	ubm.createNormalDistribution(
		numDimensions, covs);
	Mat x = (cv::Mat_<double>(1, 1) << 5);

	double result = ubm.logLikelihood(x, 0);

	BOOST_CHECK_CLOSE(result, -2.5176, .01);
}
BOOST_AUTO_TEST_CASE(likelihood_2gaussComponents1d) {
	Ubm ubm;
	ubm.means_ = (cv::Mat_<double>(1, 2) << 0, 1);
	ubm.numGaussComponents_ = 2;
	int numDimensions = 1;
	vector<Mat> covs;
	covs.push_back(cv::Mat_<double>(1, 1) << 1);
	covs.push_back(cv::Mat_<double>(1, 1) << 1);
	ubm.createNormalDistribution(
		numDimensions, covs);
	Mat x = (cv::Mat_<double>(1, 1) << 0);

	double result = ubm.logLikelihood(x, 1);

	BOOST_CHECK_CLOSE(result, -1.4189, .01);
}
BOOST_AUTO_TEST_CASE(likelihood_1gaussComponent2d) {
	Ubm ubm;
	ubm.means_ = (cv::Mat_<double>(2, 1) << 0, 0);
	ubm.numGaussComponents_ = 1;
	int numDimensions = 2;
	vector<Mat> covs;
	covs.push_back((cv::Mat_<double>(2, 2) << 1.0, 0.0, 0.0, 1.0));
	ubm.createNormalDistribution(
		numDimensions, covs);
	Mat x = (cv::Mat_<double>(2, 1) << 0, 0);

	double result = ubm.logLikelihood(x, 0);

	BOOST_CHECK_CLOSE(result, -1.8379, .01);
}
BOOST_AUTO_TEST_CASE(likelihood_2gaussComponents2d) {
	Ubm ubm;
	ubm.means_ = (cv::Mat_<double>(2, 2) << 0, 0, -4, 4);
	ubm.numGaussComponents_ = 2;
	int numDimensions = 2;
	vector<Mat> covs;
	covs.push_back((cv::Mat_<double>(2, 2) << 1.0, 0.0, 0.0, 1.0));
	covs.push_back((cv::Mat_<double>(2, 2) << 2.0, 0.0, 0.0, 0.5));
	ubm.createNormalDistribution(
		numDimensions, covs);
	Mat x = (cv::Mat_<double>(2, 1) << 1, 1);

	double result = ubm.logLikelihood(x, 1);

	BOOST_CHECK_CLOSE(result, -22.963, .1);
}
BOOST_AUTO_TEST_SUITE_END()
