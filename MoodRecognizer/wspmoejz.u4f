#pragma once
#include <vector>
#include "Types.h"
#include "UbmLoader.h"
#include "FeatureMatrixLoader.h"
#include <boost/math/distributions/normal.hpp>
#include "opencv/cv.h"

using namespace std;
using namespace cv;

class SuperVectorCalculator
{
public:
	SuperVectorCalculator(FeatureMatrixLoader& featureMatrixLoader, 
		vector<Alpha> alpha, vector<int> numComponents, UbmLoader& ubm);
	SuperVector calculate(FileName fileName);


private:
	UbmLoader* ubmLoader_;
	struct Ubm
	{
		int numGaussComponents;
		cv::Mat weights;
		cv::Mat means;
		vector<cv::Mat> covs;
		vector<vector<boost::math::normal_distribution<>>> norm_distr;
	} ubm_;
	vector<Alpha> alphas_;
	FeatureMatrixLoader* featureMatrixLoader_;
	double likelihood(const Mat& x, int gaus_nmbr) const;
	void appendAdaptedMeanToSuperVector(SuperVector &superVector, Mat &mu_i);

};
