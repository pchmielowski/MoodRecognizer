#pragma once
#include "Ubm.h"
#include "Types.h"
#include <opencv\cv.h>
using namespace cv;

class UbmLoader
{
public:
	UbmLoader(FileName ubmFileName)
	{
		FileStorage fUBM;
		fUBM.open(ubmFileName, FileStorage::READ);
		fUBM["weights"] >> ubm_.weights_;
		ubm_.weights_.convertTo(ubm_.weights_, CV_32FC1);
		fUBM["means"] >> ubm_.means_;
		ubm_.means_.convertTo(ubm_.means_, CV_32FC1);
		//ubm_.means_.t();
		//char buff[4];
		//std::string cov_nr = "cov";
		//fUBM["n_of_gaussians"] >> ubm_.numGaussComponents_;
		//Mat tmp;
		//for (int i = 0; i < ubm_.numGaussComponents_; i++) {
		//	_itoa(i, buff, 10);
		//	cov_nr += buff;
		//	fUBM[cov_nr] >> tmp;
		//	tmp = tmp.diag();
		//	//ubm_.covs_.push_back(tmp);
		//	cov_nr.resize(3);
		//}
		fUBM.release();

	}
	virtual Ubm getUbm()
	{
		return ubm_;
	}
	virtual ~UbmLoader() {}
private:
	Ubm ubm_;
};
