#include "Mp3FeatureMatrixLoader.h"
#include "lame.h"

FeatureMatrix Mp3FeatureMatrixLoader::get(const FileName fileName)
{
	loadMp3File(fileName);
	calculateFeatureMatrix();
	return FeatureMatrix();
}

void Mp3FeatureMatrixLoader::loadMp3File(const FileName fileName)
{
	FILE* mp3FileContent = fopen(fileName.c_str(), "rb");
	if (mp3FileContent == NULL)
		throw std::runtime_error("Error reading MP3 file.");
	fseek(mp3FileContent, 0, SEEK_END);
	//long sizeMp3File = ftell(mp3FileContent);
	fseek(mp3FileContent, 0, SEEK_SET);

	lame_t lame = lame_init();
	lame_set_decode_only(lame, 1);
	if (lame_init_params(lame) == -1)
		throw std::runtime_error("Parameters failed to initialize properly in lame.");


	mp3data_struct mp3data;
	memset(&mp3data, 0, sizeof(mp3data));


	cv::Mat X;

	int numDataRead, i;
	//long cumulative_read = 0;
	vector<double> vBuffer;

	static const int PCM_BUFFER_SIZE = 4096;
	static const int MP3_BUFFER_SIZE = 4096;
	unsigned char mp3Buffer[MP3_BUFFER_SIZE];
	short int leftPcmBuffer[PCM_BUFFER_SIZE], rightPcmBuffer[PCM_BUFFER_SIZE];

	int numChannels = -1;
	//int sampleRate = -1;

	hip_t hip = hip_decode_init();
	while ((numDataRead = fread(mp3Buffer, sizeof(char), MP3_BUFFER_SIZE, mp3FileContent)) > 0)
	{
		//cumulative_read += numDataRead * sizeof(char);
		int numDataToDecode = numDataRead;
		int numDecodedSamples;
		do
		{
			numDecodedSamples = hip_decode1_headers(hip, mp3Buffer, numDataToDecode, leftPcmBuffer, rightPcmBuffer, &mp3data);

			bool headerGotten = mp3data.header_parsed == 1;
			if (headerGotten)
			{
				numChannels = mp3data.stereo;
				//sampleRate = mp3data.samplerate;
			}
			else 
			{
				throw std::runtime_error("Lame decode error occured!");
				break;
			}

			if (numDecodedSamples > 0)
			{
				for (i = 0; i < numDecodedSamples; i++)
				{
					// TODO: przygotowaæ na plik mono
					vBuffer.push_back(static_cast<double>(leftPcmBuffer[i] + rightPcmBuffer[i]) / 2 / 27772); // TODO: sprawdziæ jaka liczba
				}
			}
			numDataToDecode = 0;
		} while (numDecodedSamples>0);
	}

	hip_decode_exit(hip);
	lame_close(lame);
	fclose(mp3FileContent);

	unsigned int N = vBuffer.size();
	double* buffer_mono = new double[N];
	for (unsigned int n = 0; n < N; n++) {
		buffer_mono[n] = vBuffer.at(n);


		delete[] buffer_mono; // TODO: sprawdziæ czy nic nie zniknie z macierzy
	}
}

void Mp3FeatureMatrixLoader::calculateFeatureMatrix()
{
	throw std::logic_error("The method or operation is not implemented.");
}
